# 基本類別介紹
## Fixnum 類別－一般整數
此類別為一般的整數，可以作基本的數值運算

```ruby
 > 123
 => 123
 > 123 + 123
 => 246
 > 123 / 123
 => 1
```

## Bignum 類別－大數
Ruby 可以作大數運算，當數值變得太大時 Ruby 會轉換類別至 Bignum。

```ruby
 >  123.class
 => Fixnum
 > 123 ** 123
 => 114374367934617190099880295228066276746218078451850229775887975052369504785666896446606568365201542169649974727730628842345343196581134895919942820874449837212099476648958359023796078549041949007807220625356526926729664064846685758382803707100766740220839267
 > (123 ** 123).class
 => Bignum 
```

## Float 類別－浮點數
Float 類別為浮點數，Ruby 的程式語言與Ｃ一樣會有精確度造成的「整數運算結果會帶額外小數」的問題，您可以用 `round()` 方法來解決這個問題

```ruby
（範例待補）
```

## Array 類別－陣列
跟原生程式語言不同，Ruby 中的陣列為不定長度，不需要事先宣告大小。

### 標示法
#### 單維度陣列
```ruby
 > ap([0, 1, 2, 3])
[
    [0] 0,
    [1] 1,
    [2] 2,
    [3] 3
]
 => nil 
```

#### 多維度陣列
```ruby
 > ap([[00, 01, 02, 03], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]])
[
    [0] [
        [0] 0,
        [1] 1,
        [2] 2,
        [3] 3
    ],
    [1] [
        [0] 10,
        [1] 11,
        [2] 12,
        [3] 13
    ],
    [2] [
        [0] 20,
        [1] 21,
        [2] 22,
        [3] 23
    ],
    [3] [
        [0] 30,
        [1] 31,
        [2] 32,
        [3] 33
    ]
]
 => nil
 > [[00, 01, 02, 03], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]][2][2]
 => 22
```

## String 類別－字元串列
### 標示法
#### *REPLACE ME*
```ruby
 > "Hello kitty!"
 => "Hello kitty!"
```

Ruby 支援中文（以及其他語言文字）組成的字串：

```ruby
> "許蓋功"
=> "許蓋功"
> "許蓋功213213"
=> "許蓋功213213"
```

## NilClass 類別－nil
`nil` 是一個特殊的物件，用來代表「空」

## TrueClass、FalseClass 類別－true、false
true、false 物件用來就行布林(boolean)運算：


在 Ruby 的布林運算中**只有 `nil` 和 `false` 會被解釋為「假(false)」**，其他類別與數值（包含 `0`）皆會解釋為「真(true)」

```ruby
 > nil && false && 0
 => 0
```

```ruby
 > true || true || false
 => true
 > false || false || true
 => true
 > nil || nil || 1
 => 1
 > 1 && 2 && 3
 => 3
```


```ruby
String 的 ” 與 ’ 的分別，還有 “#{xxx}” 的用法
“MMM#{1+1}MMM” #=> “MMM2MMM”
‘NNN#{2+2}NNN’ #=> “NNN\#{2+2}NNN”

Hash (Symbol{object_id}) & 新舊兩種宣告方式
{:wer => 123 , :sdf => 234} #=> {:wer => 123 , :sdf => 234}
{wer:123 , sdf: 234} #=> {:wer => 123 , :sdf => 234}
#字元和冒號不能空白，後面數值可以

全世界只有兩種東西為非：Nil, False
nil && false && 0 #=> 0

結構：if-else / unless-else / case-when / each …
puts 123 unless false if true unless nil if 1

後置判斷式，三元判斷式

```
