{% extends "Page design/Inner page.template.markdown" %}

{% block page_content %}
# Ruby-01

<!-- toc -->

## 0. 準備環境
### 安裝 [Ruby Version Manager (RVM)](https://rvm.io/) （本教學僅支援此安裝方式安裝的 Ruby）
雖然說安裝 Ruby 有很多種方式，不過使用 Ruby Version Manager (RVM) 來安裝 Ruby（以及之後會用到的 Rails）有下列好處：

* 可以選擇想要安裝的版本
* （待補）

安裝方式請參考官方網站教學，安裝完後您需要登出再登入 RVM 安裝上去的環境變數才會生效，我們才可以直接於終端機中直接執行 `rvm` 命令。

### 透過 RVM 安裝 Ruby
#### 1. 確認 RVM 可用的 Ruby 版本
執行 `$ rvm list known` 命令可以列出所有 RVM 支援的 Ruby 版本，您會發現 Ruby 有非常多不同的實作，其中 Matz's Ruby Interpreter(MRI Ruby) 為 Ruby 程式語言創作者松本行弘(Yukihiro “Matz” Matsumoto)所開發，於本教學中我們將會使用此 Ruby 實作。

```bash
$ rvm list known
# MRI Rubies
[ruby-]1.8.6[-p420]
[ruby-]1.8.7[-head] # security released on head
[ruby-]1.9.1[-p431]
[ruby-]1.9.2[-p330]
[ruby-]1.9.3[-p551]
[ruby-]2.0.0[-p643]
[ruby-]2.1.4
[ruby-]2.1[.5]
[ruby-]2.2[.1]
[ruby-]2.2-head
ruby-head

（下方省略）
```

**注意：**`rvm list known` 命令中列出的最新版本未必是上游的最新版本。MRI 版最新的版本請參考 <https://www.ruby-lang.org/zh_tw/downloads/> 的說明。

#### 2. 安裝 Ruby
執行 `$ rvm install 〈Ruby 版本〉` 來安裝指定的 Ruby 版本。

於一般狀況下，RVM 會下載該 Ruby 版本的來源程式碼(source code)，建構 Ruby 好之後將其安裝到家目錄底下的 `.rvm/bin` 目錄中，如果建構 Ruby 需要的軟體尚未安裝的話會跟您提示輸入您的密碼將這些軟體先安裝到系統中。

#### 3. 確認目前作用中的 Ruby 版本是你安裝的版本
* 執行 `$ ruby --version` 來察看目前作用中的 Ruby 版本。
* 執行 `$ which ruby` 來察看 `ruby` 命令會執行的可執行檔(executable)路徑，如果路徑是 `/usr/.../bin/ruby` 代表這是系統所安裝的 Ruby 而**不是** RVM 安裝的 Ruby，正確的路徑應為 `〈家目錄〉/.rvm/rubies/ruby-〈Ruby 版本〉/bin/ruby`。

安裝完 Ruby 之後您應可以存取 `ruby`、`irb`、`gem` 命令。

### 安裝 [Awesome Print](https://github.com/michaeldv/awesome_print)（建議）
Awesome Print 是一個可以將 Ruby 物件用美觀的方式印出的程式庫，安裝完後於程式中執行 `require "awesome_print"` 即可以用 `ap()` 來取代 `puts()` 或 `pp()` 印出任何的 Ruby 物件。

`````ruby
> puts([1, 3, 2, [2, 3]])
1
3
2
2
3
 => nil 

> ap [1, 3, 2, [2, 3]]
[
    [0] 1,
    [1] 3,
    [2] 2,
    [3] [
        [0] 2,
        [1] 3
    ]
]
 => nil 
`````

執行下列命令即可安裝 Awesome Print：
`````
? gem install awesome_print
`````

## 程式庫分類
Ruby 的程式庫分為三類：

### Core（核心）
Core 程式庫中的所有類別於初始狀態就可以直接調用。

### Std-lib（標準程式庫）
Std-lib 中的類別需要額外的 `require` 才可以存取。

### Gem（寶石）
Gems 為**第三方**所設計的程式庫，需要手動使用 `gem` 命令來安裝，然後再於程式中 `require` 才可以存取。

您可以自 [The Ruby Toolbox](https://www.ruby-toolbox.com/) 網站找到各種不同用途下可用的 Gem 程式庫

![The Ruby Toolbox 網頁截圖](Resources/Pictures/The%20Ruby%20Toolbox%20pageshot.png)

## 如何尋求幫助
### 查詢參考文件
#### 標準程式庫
您可以於  [Ruby-Doc.org](http://ruby-doc.org/) 查詢所有 Ruby 官方的 Core、Std-lib 程式庫的應用程式介面(API)參考資料。
![Ruby-Doc.org screenshot](Resources/Pictures/Ruby-Doc.org%20screenshot.png)

#### Gem
Gem 的參考文件請參考該 Gem 的官方網站，大部份都會寫在該 GEM 的 README 文件中。

如果 Gem 被托管在 GitHub 程式碼托管網站上，您還可以察看它的 Wiki。

### 建檔軟體缺陷報告／議題<br />File bug report/issue
如果您發現程式庫有軟體缺陷(bug)或是有其他問題您可以到該程式庫的軟體缺陷／議題追蹤系統(bug/issue tracker)建檔一個軟體缺陷報告／議題。


![Issue tracker example](Resources/Pictures/Issue%20tracker%20example01.png)

## 1. {irb} 開宗明義
### 你***不應該***使用 Microsoft Windows 作業系統寫 Ruby
* 原因
    * 很多 Ruby 的程式庫都只相容 GNU/Linux 作業系統（而且有的還需要建構原生(native)語言(C...)的程式），於 Windows 上要使用這些程式庫是比較困難的。
    * 效能問題（內容待補）

### class()、methods() 方法
在所有 Ruby 類別(class)中有一些方法(method)是共有的，像是 `class()` 跟 `methods()` 這兩個方法。

`class()` 方法會回傳該物件的類別：

```ruby
 > 123.class()
 => Fixnum 
 > 123.123.class()
 => Float
 > (123..999).class()
 => Range
 > true.class()
 => TrueClass
 > nil.class()
 => NilClass 
```

`methods()` 方法會回傳包含該物件類別的所有方法的陣列：

```ruby
 > 0.9.methods()
 => [:to_s, :inspect, :coerce, :-@, :+, :-, :*, :/, :quo, :fdiv, :%, :modulo, :divmod, :**, :==, :===, :<=>, :>, :>=, :<, :<=, :eql?, :hash, :to_f, :abs, :magnitude, :zero?, :to_i, :to_int, :floor, :ceil, :round, :truncate, :nan?, :infinite?, :finite?, :next_float, :prev_float, :numerator, :denominator, :to_r, :rationalize, :arg, :angle, :phase, :singleton_method_added, :i, :+@, :div, :remainder, :real?, :integer?, :nonzero?, :step, :to_c, :real, :imaginary, :imag, :abs2, :rectangular, :rect, :polar, :conjugate, :conj, :between?, :nil?, :=~, :!~, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :frozen?, :methods, :singleton_methods, :protected_methods, :private_methods, :public_methods, :instance_variables, :instance_variable_get, :instance_variable_set, :instance_variable_defined?, :remove_instance_variable, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send, :respond_to?, :extend, :display, :method, :public_method, :singleton_method, :define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]
```

知道類別與所有該類別支援的方法之後您就可以用先前提到的方式去查詢它的參考文件，您可以找到該類別的所有方法以及使用該方法的教學內容。

若使用 Awesome Print 來輸出 `methods()` 方法回傳的內容的話還可以知道該方法的定義域：

```ruby
 > require("awesome_print")
 => true 
 > ap(nil.methods())
[
    [ 0]                          !()                 NilClass (BasicObject)
    [ 1]                         !=(arg1)             NilClass (BasicObject)
    [ 2]                         !~(arg1)             NilClass (Kernel)
    [ 3]                          &(arg1)             NilClass
    [ 4]                        <=>(arg1)             NilClass (Kernel)
    [ 5]                         ==(arg1)             NilClass (BasicObject)
    [ 6]                        ===(arg1)             NilClass (Kernel)
    [ 7]                         =~(arg1)             NilClass (Kernel)
    [ 8]                          ^(arg1)             NilClass
    [ 9]                     __id__()                 NilClass (BasicObject)
    [10]                   __send__(*arg1)            NilClass (BasicObject)
    [11]                         ai(*options)         NilClass (Kernel)
    [12]            awesome_inspect(*options)         NilClass (Kernel)
    [13]              awesome_print(object, *options) NilClass (Kernel)
    [14]                      class()                 NilClass (Kernel)
    [15]                      clone()                 NilClass (Kernel)
    [16]    define_singleton_method(*arg1)            NilClass (Kernel)
    [17]                    display(*arg1)            NilClass (Kernel)
    [18]                        dup()                 NilClass (Kernel)
    [19]                   enum_for(*arg1)            NilClass (Kernel)
    [20]                       eql?(arg1)             NilClass (Kernel)
    [21]                     equal?(arg1)             NilClass (BasicObject)
    [22]                     extend(*arg1)            NilClass (Kernel)
    [23]                     freeze()                 NilClass (Kernel)
    [24]                    frozen?()                 NilClass (Kernel)
    [25]                       hash()                 NilClass (Kernel)
    [26]                    inspect()                 NilClass
    [27]              instance_eval(*arg1)            NilClass (BasicObject)
    [28]              instance_exec(*arg1)            NilClass (BasicObject)
    [29]               instance_of?(arg1)             NilClass (Kernel)
    [30] instance_variable_defined?(arg1)             NilClass (Kernel)
    [31]      instance_variable_get(arg1)             NilClass (Kernel)
    [32]      instance_variable_set(arg1, arg2)       NilClass (Kernel)
    [33]         instance_variables()                 NilClass (Kernel)
    [34]                      is_a?(arg1)             NilClass (Kernel)
    [35]                     itself()                 NilClass (Kernel)
    [36]                   kind_of?(arg1)             NilClass (Kernel)
    [37]                     method(arg1)             NilClass (Kernel)
    [38]                    methods(*args)            NilClass (Object)
    [39]                       nil?()                 NilClass
    [40]                  object_id()                 NilClass (Kernel)
    [41]            private_methods(*args)            NilClass (Object)
    [42]          protected_methods(*args)            NilClass (Object)
    [43]              public_method(arg1)             NilClass (Kernel)
    [44]             public_methods(*args)            NilClass (Object)
    [45]                public_send(*arg1)            NilClass (Kernel)
    [46]                rationalize(*arg1)            NilClass
    [47]   remove_instance_variable(arg1)             NilClass (Kernel)
    [48]                respond_to?(*arg1)            NilClass (Kernel)
    [49]                       send(*arg1)            NilClass (Kernel)
    [50]            singleton_class()                 NilClass (Kernel)
    [51]           singleton_method(arg1)             NilClass (Kernel)
    [52]          singleton_methods(*args)            NilClass (Object)
    [53]                      taint()                 NilClass (Kernel)
    [54]                   tainted?()                 NilClass (Kernel)
    [55]                        tap()                 NilClass (Kernel)
    [56]                       to_a()                 NilClass
    [57]                       to_c()                 NilClass
    [58]                    to_enum(*arg1)            NilClass (Kernel)
    [59]                       to_f()                 NilClass
    [60]                       to_h()                 NilClass
    [61]                       to_i()                 NilClass
    [62]                       to_r()                 NilClass
    [63]                       to_s()                 NilClass
    [64]                      trust()                 NilClass (Kernel)
    [65]                    untaint()                 NilClass (Kernel)
    [66]                    untrust()                 NilClass (Kernel)
    [67]                 untrusted?()                 NilClass (Kernel)
    [68]                          |(arg1)             NilClass
]
 => nil
```

`to_*()` 方法為進行類別轉換之用。


### Ruby 內所有的東西皆為物件，無基本資料類型(primitive data type)，包含 Nil
不像 Java 有基本型別(Int/Float/...)，Ruby 所有的東西都是物件

### 基本類別介紹
#### Fixnum 類別－一般整數
此類別為一般的整數，可以作基本的數值運算

```ruby
 > 123
 => 123
 > 123 + 123
 => 246
 > 123 / 123
 => 1
```

#### Bignum 類別－大數
Ruby 可以作大數運算，當數值變得太大時 Ruby 會轉換類別至 Bignum。

```ruby
 >  123.class
 => Fixnum
 > 123 ** 123
 => 114374367934617190099880295228066276746218078451850229775887975052369504785666896446606568365201542169649974727730628842345343196581134895919942820874449837212099476648958359023796078549041949007807220625356526926729664064846685758382803707100766740220839267
 > (123 ** 123).class
 => Bignum 
```

#### Float 類別－浮點數
Float 類別為浮點數，Ruby 的程式語言與Ｃ一樣會有精確度造成的「整數運算結果會帶額外小數」的問題，您可以用 `round()` 方法來解決這個問題

```ruby
（範例待補）
```

#### Array 類別－陣列
跟原生程式語言不同，Ruby 中的陣列為不定長度，不需要事先宣告大小。

```ruby
 > ap([0, 1, 2, 3])
[
    [0] 0,
    [1] 1,
    [2] 2,
    [3] 3
]
 => nil 
```

多維陣列的標示法：
```ruby
 > ap([[00, 01, 02, 03], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]])
[
    [0] [
        [0] 0,
        [1] 1,
        [2] 2,
        [3] 3
    ],
    [1] [
        [0] 10,
        [1] 11,
        [2] 12,
        [3] 13
    ],
    [2] [
        [0] 20,
        [1] 21,
        [2] 22,
        [3] 23
    ],
    [3] [
        [0] 30,
        [1] 31,
        [2] 32,
        [3] 33
    ]
]
 => nil
 > [[00, 01, 02, 03], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33]][2][2]
 => 22
```

#### String 類別－字元串列
```ruby
 > "Hello kitty!"
 => "Hello kitty!"
```

Ruby 支援中文（以及其他語言文字）組成的字串：

```ruby
> "許蓋功"
=> "許蓋功"
> "許蓋功213213"
=> "許蓋功213213"
```

#### NilClass 類別－nil
`nil` 是一個特殊的物件，用來代表「空」 

#### TrueClass、FalseClass 類別－true、false
true、false 物件用來就行布林(boolean)運算：


在 Ruby 的布林運算中**只有 `nil` 和 `false` 會被解釋為「假(false)」**，其他類別與數值（包含 `0`）皆會解釋為「真(true)」

```ruby
 > nil && false && 0
 => 0
```

```ruby
 > true || true || false
 => true
 > false || false || true
 => true
 > nil || nil || 1
 => 1
 > 1 && 2 && 3
 => 3
```


```ruby
String 的 ” 與 ’ 的分別，還有 “#{xxx}” 的用法
“MMM#{1+1}MMM” #=> “MMM2MMM”
‘NNN#{2+2}NNN’ #=> “NNN\#{2+2}NNN”

Hash (Symbol{object_id}) & 新舊兩種宣告方式
{:wer => 123 , :sdf => 234} #=> {:wer => 123 , :sdf => 234}
{wer:123 , sdf: 234} #=> {:wer => 123 , :sdf => 234}
#字元和冒號不能空白，後面數值可以

全世界只有兩種東西為非：Nil, False
nil && false && 0 #=> 0

結構：if-else / unless-else / case-when / each …
puts 123 unless false if true unless nil if 1

後置判斷式，三元判斷式

```

## 參考資料<br />Reference Data
* [RVM: Ruby Version Manager - './install' - Installing RVM.](https://rvm.io/rubies/installing)
* [關於 Ruby](https://www.ruby-lang.org/zh_tw/about/)
* [Ruby MRI - Wikipedia, the free encyclopedia](https://en.wikipedia.org/wiki/Ruby_MRI)

{% endblock %}
